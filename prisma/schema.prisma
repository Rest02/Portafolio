// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  bio         String?
  avatar      String?       // URL de la foto de perfil
  projects    Project[]
  experiences Experience[]
  skills      Skill[]
  socialLinks SocialLink[]
  contacts    Contact[]

  certificates Certificate[] // ✅ Relación corregida (en plural y minúscula)
}


model Certificate {
  id          String   @id @default(cuid())
  title       String   // Nombre del certificado (Ej: "Next.js Advanced")
  issuer      String   // Entidad que lo emitió (Ej: "Udemy", "Coursera")
  issueDate   DateTime // Fecha en que se obtuvo
  expirationDate DateTime? // Opcional, si el certificado expira
  credentialId String?  // ID del certificado (si lo tiene)
  credentialUrl String? // URL del certificado (si lo tiene)
  imageUrl    String?   // URL de la imagen del certificado
  createdAt   DateTime @default(now())

  // Relación con User
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Project {
  id          String      @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  repoUrl     String?
  demoUrl     String?
  createdAt   DateTime @default(now())

  // Relación con User
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relación con tags
  tags ProjectTag[]
}

model Tag {
  id       String        @id @default(cuid())
  name     String        @unique
  projects ProjectTag[]
}


model ProjectTag {
  projectId String
  tagId     String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId]) // Clave compuesta para evitar duplicados
}

model Experience {
  id          String  @id @default(cuid())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String

  // Relación con User
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id     String @id @default(cuid())
  name   String
  level  Int  // 1 - 100 para indicar dominio

  // Relación con User
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id       String @id @default(cuid())
  platform String  // Ej: "GitHub", "LinkedIn"
  url      String  // Enlace a la red social
  icon     String? // URL o nombre del icono

  // Relación con User
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String  @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  // Relación con User
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}